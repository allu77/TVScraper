#!/bin/bash

show_usage() {
	echo "Usage: $0 [OPTIONS] <ACTION> ..." >&2
	echo "" >&2
	echo "Valid OPTIONS" >&2
	echo "  -b HTTP_BASE_URL" >&2
	echo "  -u HTTP_USER" >&2
	echo "  -p HTTP_PASSWORD">&2
	echo "  -a HTTP_AUTH (= <digest|basic>)">&2
	echo "" >&2
	echo "HTTP parameters can either be provided as cmd line options or inside" >&2
	echo "configuration files:" >&2
	echo "  /etc/tvscraper" >&2
	echo "  ~/.tvscraperrc" >&2
	echo "" >&2
	echo "Valid ACTION" >&2
	echo "  update [additional options...]" >&2
	echo "  notify" >&2
	echo "  cleanup" >&2
	echo "  get-best [additional options...]" >&2
	echo "  find-missing [additional options...]" >&2
	echo "" >&2
	echo "Some ACTIONs have additional options:" >&2
	echo "  update" >&2
	echo "    -x <exclude_filter> comma-separated list of scrapers to exclude, in the" >&2
	echo "                        following format: <source:type>[,<source:type>...]" >&2
	echo "                        type can be show or season, '*' considered wildcard" >&2
	echo "                        E.g: -x wikipedia:season,DDU:*,*:show ">&2
	echo "  get-best" >&2
	echo "    -t <ed2k|torrent>   filter link by type" >&2
	echo "    -d <seconds>        return only links published in the last X seconds" >&2
	echo "  find-missing" >&2
	echo "    -d <seconds>        return episode missing files only if episode was" >&2
	echo "                        aired before <seconds> ago">&2
}


api() { 
	action=$1
	shift

	paramstring=""

	while [ $# -gt 1 ]; do
		param=$1
		shift
		value="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$1")"
		shift

		paramstring="$paramstring&$param=$value"
	done


	auth=""
	[ -z "$HTTP_USER" ] || auth="--$HTTP_AUTH -u $HTTP_USER:$HTTP_PASSWORD"

	result=$(curl -s --data "format=txt&action=$action$paramstring" $auth $HTTP_BASE_URL/api.php|awk '

		doRead=="status" { status=$2; doRead="nothing" };
		doRead=="errmsg" { for (i=2; i<=NF; i++) printf(" %s", $i); printf("\n"); doPrint="nothing"; }
		doRead=="result" && /^  / { print $0; }

		/^  \["status"\]/ { doRead="status"; }
		/^  \["errmsg"\]/ { doRead="errmsg"; }
		/^  \["result"\]/ { doRead="result"; }

		END {
			if (status=="\"error\"") {
				exit 1;
			} else {
				exit 0;
			}
		}

	')

	if [ $? -gt 0 ]; then
		echo -n "Error calling TV api: $result " >&2
		return 1
	else 
		echo "$result"
		return 0
	fi
	
	
}

do_update() {

	excludeFilter=""	
	legacyFilter=""
	while [ $# -gt 0 ]; do
		case "$1" in
			-x) shift ; excludeFilter="$1" ;;
			-*) 
				echo "Unknown option $1" >&2
				show_usage
				exit 1
				;;
			only_season)
				legacyFilter="*:show" 
				echo "WARNING: only_season is deprecated. Use option '-x *:show' instead." >&2
				;;
			only_show)
				legacyFilter="*:season" 
				echo "WARNING: only_show is deprecated. Use option '-x *:season' instead." >&2
				;;
			*)  break;;	# terminate while loop
		esac
		shift
	done

	if ! [ -z "$legacyFilter" ]; then
		if [ -z "$excludeFilter" ]; then
			excludeFilter="$legacyFilter";
		else
			excludeFilter="$excludeFilter,$legacyFilter";
		fi
	fi

	scraperList=$(api getActiveScrapers | awk '
		doRead=="id" { id=$2; doRead="nothing"; }
		doRead=="uri" { uri=$2; doRead="nothing"; }
		doRead=="season" { season=$2; doRead="nothing"; }
		doRead=="source" { source=$2; doRead="nothing"; }
		/^      \["id"\]/ { doRead="id"; }
		/^      \["uri"\]/ { doRead="uri"; }
		/^      \["season"\]/ { doRead="season"; }
		/^      \["source"\]/ { doRead="source"; }
		/^    \}/ { printf "%s,%s,%s,%s\n", id, uri, season, source; }
	')

	oldIFS=$IFS
	IFS=$'\n'

	if [ $? -eq 0 ]; then
		IFS=$oldIFS
		for scraperData in $scraperList; do
			scraperId=$(echo $scraperData | cut -d , -f 1 | sed s/\"//g)
			scraperUri=$(echo $scraperData | cut -d , -f 2 | sed s/\"//g)
			scraperSeason=$(echo $scraperData | cut -d , -f 3 | sed s/\"//g)
			scraperSource=$(echo $scraperData | cut -d , -f 4 | sed s/\"//g)

			skipScraper=0
			IFS=","
			for x in $excludeFilter; do
				IFS=$oldIFS
				xSource=$(echo "$x" | cut -d : -f 1)
				xType=$(echo "$x" | cut -d : -f 2)

				if [ "$xSource" == "*" ] || [ "$xSource" == "$scraperSource" ] ; then
					[ "$xType" == "*" ] && skipScraper=1 && break;
					[ "$xType" == "season" ] && ! [ -z "$scraperSeason" ] && skipScraper=1 && break;
					[ "$xType" == "show" ] && [ -z "$scraperSeason" ] && skipScraper=1 && break;
				fi
			done
			IFS=$oldIFS

			if [ "$skipScraper" -gt 0 ]; then
				echo "Skipping scraper $scraperId ($scraperUri)"
			else 
				echo -n "Running scraper $scraperId ($scraperUri) ..."
				scraperOutput=$(api runScraper scraperId $scraperId)
				if [ $? -eq 0 ]; then
					echo "OK."
				else
					echo "Failed!"
				fi
			fi
		done
	fi

	IFS=$oldIFS
}

do_notify() {

	mail_to="$1"
	if [ -z "$mail_to" ]; then
		echo "No mail recipient provided!" >&2
		return 1
	fi
	

	tbnList=$(api getScrapedSeasonsTBN | awk '
		doRead=="source" { source=$2; doRead="nothing"; }
		doRead=="scraper" { scraper=$2; doRead="nothing"; }
		doRead=="n" { n=$2; doRead="nothing"; }
		doRead=="uri" { uri=$2; doRead="nothing"; }
		doRead=="id" { id=$2; doRead="nothing"; }
		/^      \["source"\]/ { doRead="source"; }
		/^      \["scraper"\]/ { doRead="scraper"; }
		/^      \["n"\]/ { doRead="n"; }
		/^      \["uri"\]/ { doRead="uri"; }
		/^      \["id"\]/ { doRead="id"; }
		/^    \}/ { printf "%s,%s,%s,%s,%s\n", source, scraper, n, uri, id; }
	')

	oldIFS=$IFS
	IFS=$'\n'

	for scrapedSeason in $tbnList; do
		IFS=$oldIFS
		sSource=$(echo $scrapedSeason | cut -d , -f 1 | sed s/\"//g)
		sScraper=$(echo $scrapedSeason | cut -d , -f 2 | sed s/\"//g)
		sN=$(echo $scrapedSeason | cut -d , -f 3 | sed s/\"//g)
		sURI=$(echo $scrapedSeason | cut -d , -f 4 | sed s/\"//g)
		sId=$(echo $scrapedSeason | cut -d , -f 5 | sed s/\"//g)

		sScraperData=$(api getScraper scraperId $sScraper | awk '
			doRead=="tvshow" { tvshow=$2; doRead="nothing"; }
			/^    \["tvshow"\]/ { doRead="tvshow"; }
			/^  \}/ { printf "%s\n", tvshow; }
		')
		sShowId=$(echo $sScraperData | cut -d , -f 1 | sed s/\"//g)

		showData=$(api getTVShow showId $sShowId | awk '
		doRead=="title" { for(i=2;i<=NF;i++){title=title" "$i}; doRead="nothing"; }
		/^    \["title"\]/ { doRead="title"; }
		/^  \}/ { printf "%s\n", title; }
		')
		sTitle=$(echo $showData | cut -d , -f 1 | sed s/\"//g)

		echo "
		Found new scraper for season $sN for $sTitle on $sSource: 

		$sURI
		" |  mail -s "New Season Scraped! $sTitle - $sN" "$mail_to"

		api setScrapedSeason scrapedSeasonId $sId tbn _REMOVE_ > /dev/null


	done
	
	IFS=$oldIFS
	return 0;
}

do_cleanup_complete_seasons() {

	showList=$(api getAllTVShows | awk '
		doRead=="id" { id=$2; doRead="nothing"; }
		doRead=="title" { title=$2; for(i=3;i<=NF;i++){title=title" "$i}; doRead="nothing"; }
		/^      \["id"\]/ { doRead="id"; }
		/^      \["title"\]/ { doRead="title"; }
		/^    \}/ { printf "%s,%s\n", id, title; }
	')

	oldIFS=$IFS
	IFS=$'\n'

	for show in $showList; do
		IFS=$oldIFS
		showId=$(echo $show | cut -d , -f 1 | sed s/\"//g)
		showTitle=$(echo $show | cut -d , -f 2 | sed s/\"//g)

		echo "Cleaning up seasons for show $showId ($showTitle)..."

		seasonList=$(api getTVShowSeasons showId $showId| awk '
			doRead=="id" { id=$2; doRead="nothing"; }
			doRead=="n" { n=$2; doRead="nothing"; }
			doRead=="status" { status=$2; doRead="nothing"; }
			/^      \["id"\]/ { doRead="id"; }
			/^      \["n"\]/ { doRead="n"; }
			/^      \["status"\]/ { doRead="status"; }
			/^    \}/ { printf "%s,%s,%s\n", id, n, status; }
		')

		lastCompleteIndex=0
		IFS=$'\n'
		for season in $seasonList; do
			IFS=$oldIFS
			seasonId=$(echo $season | cut -d , -f 1 | sed s/\"//g)
			seasonN=$(echo $season | cut -d , -f 2 | sed s/\"//g)
			seasonStatus=$(echo $season | cut -d , -f 3 | sed s/\"//g)
			[ "$seasonStatus" == "complete" ] && [ "$seasonN" -gt $lastCompleteIndex ] && lastCompleteIndex=$seasonN
		done
		IFS=$oldIFS

		if [ $lastCompleteIndex -gt 0 ]; then
			echo "Last complete season: $lastCompleteIndex."

			IFS=$'\n'
			for season in $seasonList; do
				IFS=$oldIFS
				seasonId=$(echo $season | cut -d , -f 1 | sed s/\"//g)
				seasonN=$(echo $season | cut -d , -f 2 | sed s/\"//g)
				seasonStatus=$(echo $season | cut -d , -f 3 | sed s/\"//g)
				if [ "$seasonStatus" == "complete" ] && [ "$seasonN" -lt $lastCompleteIndex ]; then
					echo -n "Removing season $seasonId ($seasonN)... "
					if api removeSeason seasonId $seasonId > /dev/null; then
						echo "Done."
					else
						echo "Failed!"
					fi
				fi 
			done
			IFS=$oldIFS

			seasonList=$(api getScrapedSeasons showId $showId| awk '
				doRead=="id" { id=$2; doRead="nothing"; }
				doRead=="n" { n=$2; doRead="nothing"; }
				/^      \["id"\]/ { doRead="id"; }
				/^      \["n"\]/ { doRead="n"; }
				/^    \}/ { printf "%s,%s\n", id, n; }
			')
			IFS=$'\n'
			for season in $seasonList; do
				IFS=$oldIFS
				seasonId=$(echo $season | cut -d , -f 1 | sed s/\"//g)
				seasonN=$(echo $season | cut -d , -f 2 | sed s/\"//g)
				if ! [ -z "$seasonN" ] && [ "$seasonN" -le $lastCompleteIndex ]; then
					echo -n "Removing scraped season $seasonId... "
					if api removeScrapedSeason scrapedSeasonId $seasonId > /dev/null; then
						echo "Done."
					else
						echo "Failed!"
					fi
				fi
				
			done
			IFS=$oldIFS
		fi
	done
	IFS=$oldIFS
}

do_get_best() {
	local filterType
	local filterPubDate
	while [ $# -gt 0 ]; do
		case "$1" in
			-t) shift ; filterType="$1" ;;
			-d) shift ; filterPubDate=$(($(date +"%s") - $1)) ;;
			-*) 
				echo "Unknown option $1" >&2
				show_usage
				exit 1
				;;
			*)  break;;	# terminate while loop
		esac
		shift
	done
	seasonList=$(api getAllWatchedSeasons | awk '
		doRead=="id" { id=$2; doRead="nothing"; }
		/^      \["id"\]/ { doRead="id"; }
		/^    \}/ { printf "%s\n", id; }
	')

	oldIFS=$IFS
	IFS=$'\n'

	local finalList
	for season in $seasonList; do
		IFS=$oldIFS
		seasonId=$(echo $season | cut -d , -f 1 | sed s/\"//g)

		fileList=$(api getBestFilesForSeason seasonId $seasonId | awk '
			doRead=="pubDate" { pubDate=$2; doRead="nothing"; }
			doRead=="type" { type=$2; doRead="nothing"; }
			doRead=="uri" { uri=$2; for(i=3;i<=NF;i++){uri=uri" "$i}; doRead="nothing"; }
			/^      \["pubDate"\]/ { doRead="pubDate"; }
			/^      \["uri"\]/ { doRead="uri"; }
			/^      \["type"\]/ { doRead="type"; }
			/^    \}/ { printf "%s,%s,%s\n", pubDate, type, uri; }
		')

		IFS=$'\n'
		for file in $fileList; do
			IFS=$oldIFS
			filePubDate=$(echo $file | cut -d , -f 1 | sed s/\"//g)
			fileType=$(echo $file | cut -d , -f 2 | sed s/\"//g)

			if ( [ -z "$filterType" ] || [ "$filterType" == "$fileType" ] ) && ( [ -z "$filterPubDate" ] || [ "$filePubDate" -ge "$filterPubDate" ] ) ; then
				finalList=$(printf "%s\n%s" "$finalList" "$file")
			fi

		done
		IFS=$oldIFS

	done
	IFS=$oldIFS
	echo "$finalList" | tail -n +2 | sort -r | cut -d , -f 3- | sed s/\"//g


}

do_find_missing() {
	local filterAirTime=$(date +"%s")
	while [ $# -gt 0 ]; do
		case "$1" in
			-d) shift ; filterAirTime=$(($(date +"%s") - $1)) ;;
			-*) 
				echo "Unknown option $1" >&2
				show_usage
				exit 1
				;;
			*)  break;;	# terminate while loop
		esac
		shift
	done
	showList=$(api getAllTVShows | awk '
		doRead=="id" { id=$2; doRead="nothing"; }
		doRead=="lastAiredEpisodeIndex" { lastAiredEpisodeIndex=$1; gsub(/[int\(\)]/, "", lastAiredEpisodeIndex); doRead="nothing"; }
		doRead=="episodesWithFile" { episodesWithFile=$1; gsub(/[int\(\)]/, "", episodesWithFile); doRead="nothing"; }
		doRead=="lang" { lang=$2; doRead="nothing"; }
		doRead=="nativeLang" { nativeLang=$2; doRead="nothing"; }
		doRead=="res" { res=$2; doRead="nothing"; }
		doRead=="title" { for(i=2;i<=NF;i++){title=title" "$i}; doRead="nothing"; }
		doRead=="alternateTitle" { for(i=2;i<=NF;i++){alternateTitle=alternateTitle" "$i}; doRead="nothing"; }
		/^      \["id"\]/ { doRead="id"; }
		/^      \["lang"\]/ { doRead="lang"; }
		/^      \["nativeLang"\]/ { doRead="nativeLang"; }
		/^      \["lastAiredEpisodeIndex"\]/ { doRead="lastAiredEpisodeIndex"; }
		/^      \["episodesWithFile"\]/ { doRead="episodesWithFile"; }
		/^      \["res"\]/ { doRead="res"; }
		/^      \["title"\]/ { doRead="title"; }
		/^      \["alternateTitle"\]/ { doRead="alternateTitle"; }
		/^    \}/ { 
			printf "%s,%s,%s,%s,%s,%s,%s,%s\n", id, lastAiredEpisodeIndex, episodesWithFile, lang, nativeLang, res, title, alternateTitle; 
			lastAiredEpisodeIndex=""; episodesWithFile=""; lang=""; nativeLang=""; res=""; title=""; alternateTitle="";

			}
	')

	oldIFS=$IFS
	IFS=$'\n'

	for show in $showList; do
		IFS=$oldIFS
		showId=$(echo $show | cut -d , -f 1 | sed s/\"//g)
		showLastAiredEpisodeIndex=$(echo $show | cut -d , -f 2 | sed s/\"//g)
		showEpisodesWithFile=$(echo $show | cut -d , -f 3 | sed s/\"//g)
		showLang=$(echo $show | cut -d , -f 4 | sed s/\"//g)
		showNativeLang=$(echo $show | cut -d , -f 5 | sed s/\"//g)
		showRes=$(echo $show | cut -d , -f 6 | sed s/\"//g)
		showTitle=$(echo $show | cut -d , -f 7 | sed s/\"//g | cut -c 2-)
		showAlternateTitle=$(echo $show | cut -d , -f 8 | sed s/\"//g | cut -c 2-)

		[ -z "$showLastAiredEpisodeIndex" ] && showLastAiredEpisodeIndex=0
		[ -z "$showEpisodesWithFile" ] && showEpisodesWithFile=0

		if [ "$showLastAiredEpisodeIndex" -gt "$showEpisodesWithFile" ]; then
			#echo "Missing file(s) for $showTitle - $showLastAiredEpisodeIndex - $showEpisodesWithFile"
			seasonList=$(api getTVShowSeasons showId $showId | awk '
				doRead=="id" { id=$2; doRead="nothing"; }
				doRead=="status" { status=$2; doRead="nothing"; }
				doRead=="n" { n=$2; doRead="nothing"; }
				/^      \["id"\]/ { doRead="id"; }
				/^      \["status"\]/ { doRead="status"; }
				/^      \["n"\]/ { doRead="n"; }
				/^    \}/ { printf "%s,%s,%s\n", id, status, n; }
			')
			oldIFS=$IFS
			IFS=$'\n'
			for season in $seasonList; do
				IFS=$oldIFS
				seasonId=$(echo $season | cut -d , -f 1 | sed s/\"//g)
				seasonStatus=$(echo $season | cut -d , -f 2 | sed s/\"//g)
				seasonN=$(echo $season | cut -d , -f 3 | sed s/\"//g)

				if [ "$seasonStatus" == "watched" ]; then
					api getBestFilesForSeason seasonId $seasonId > /dev/null
					episodeList=$(api getSeasonEpisodes seasonId $seasonId | awk '
						doRead=="n" { n=$2; doRead="nothing"; }
						doRead=="airDate" { airDate=$2; doRead="nothing"; }
						doRead=="bestFile" { bestFile=$2; doRead="nothing"; }
						/^      \["n"\]/ { doRead="n"; }
						/^      \["airDate"\]/ { doRead="airDate"; }
						/^      \["bestFile"\]/ { doRead="bestFile"; }
						/^    \}/ { printf "%s,%s,%s\n", n, airDate, bestFile; airDate=""; bestFile=""}
					')
					oldIFS=$IFS
					IFS=$'\n'
					for episode in $episodeList; do
						IFS=$oldIFS
						episodeN=$(echo $episode | cut -d , -f 1 | sed s/\"//g)
						episodeAirDate=$(echo $episode | cut -d , -f 2 | sed s/\"//g)
						episodeBestFile=$(echo $episode | cut -d , -f 3 | sed s/\"//g)
				
						if ! [ -z "$episodeAirDate" ] && [ "$episodeAirDate" -lt "$filterAirTime" ] && [ -z "$episodeBestFile" ]; then
							echo "\"$showTitle\",\"$showAlternateTitle\",$showLang,$showNativeLang,$showRes,$seasonN,$episodeN"
						fi

					done
					IFS=$oldIFS
				fi

			done
			IFS=$oldIFS

		fi

	done

	IFS=$oldIFS

}

HTTP_USER=""
HTTP_PASSWORD=""
HTTP_AUTH="digest"
HTTP_BASE_URL="http://localhost/TVScraper"

[ -e /etc/tvscraper ] && source /etc/tvscraper
[ -e ~/.tvscraperrc ] && source ~/.tvscraperrc


while [ $# -gt 0 ]; do
	case "$1" in
		-u) shift ; HTTP_USER="$1" ;; 
		-p) shift ; HTTP_PASSWORD="$1" ;; 
		-b) shift ; HTTP_BASE_URL="$1" ;; 
		-a) shift ; HTTP_AUTH="$1" ;;
		-*) 
		    echo "Unknown option $1" >&2
			show_usage
		    exit 1
		    ;;
		*)  break;;	# terminate while loop
	esac
	shift
done

if [ $# -eq 0 ]; then
	echo "Action not privded"
	show_usage
	exit 1;
fi

action=$1

case "$action" in

"update")
	shift; do_update "$@"
	;;

"notify")
	shift; if ! do_notify "$@"; then exit 1; fi
	;;

"cleanup")
	shift; do_cleanup_complete_seasons "$@"
	;;

"get-best")
	shift; do_get_best "$@"
	;;

"find-missing")
	shift; do_find_missing "$@"
	;;

*)
	echo "Unknown action $action"
	show_usage
	exit 1;
	;;
esac




